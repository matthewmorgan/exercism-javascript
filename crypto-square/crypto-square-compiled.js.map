{"version":3,"sources":["crypto-square.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,YAAY,CAAC;;AAEb,MAAM,CAAC,OAAO,GAAG,SAAS,MAAM,CAAC,GAAG,EAAC;AACpC,KAAI,MAAM,GAAG,CAAC;KACZ,OAAO,GAAG,EAAE;KACZ,UAAU,GAAG,EAAE;KACf,kBAAkB,GAAG,EAAE,CAAC;;;AAG1B,WAAU,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,EAAC,EAAE,CAAC,CAAC;;;AAGjD,OAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;;AAEjD,mBAAkB,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,MAAM,UAAS,MAAM,QAAK,GAAG,CAAC,CAAC,CAAC;AAC1E,MAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAC;;;;;;AAC9B,wBAAmB,kBAAkB;QAA7B,OAAO;AAAwB,WAAO,IAAK,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,AAAC,CAAC;IAAA;;;;;;;;;;;;;;;EACrE;;AAED,QAAO;AACN,YAAU,EAAE;UAAM,OAAO;GAAA;AACzB,oBAAkB,EAAC;UAAM,UAAU;GAAA;AACnC,mBAAiB,EAAE,SAAS,iBAAiB,GAAE;AAAE,UAAO,kBAAkB,CAAC;GAAE;AAC7E,MAAI,EAAE,SAAS,IAAI,GAAE;AAAE,UAAO,MAAM,CAAC;GAAE;EACvC,CAAC;CAEF,CAAC","file":"crypto-square-compiled.js","sourcesContent":["//'use strict'\n//\n//\n//var Crypto = function(phrase){\n//\tvar squareSize=0;\n//\n//\tfunction getSegments(str){\n//\t\tvar result=[];\n//\t\tvar source=str.split('');\n//\t\twhile (source.length>0){\n//\t\t\tresult.push(source.splice(0,squareSize).join(''));\n//\t\t}\n//\t\treturn result;\n//\t};\n//\n//\tfunction getCipherText(square){\n//\t\tvar cipherText=\"\";\n//\t\tfor (var ii=0;ii<squareSize;ii++){\n//\t\t\tfor (var jj=0;jj<square.length;jj++){\n//\t\t\t\tcipherText+=square[jj][ii] || \"\";\n//\t\t\t}\n//\t\t}\n//\t\treturn cipherText;\n//\t};\n//\n//\tfunction normalizePlaintext(str){\n//\t\treturn str.toLowerCase().replace(/[^\\w]/g,'');\n//\t};\n//\n//\tfunction getSquareSize(str){\n//\t\treturn Math.ceil(Math.sqrt(str.length));\n//\t};\n//\n//\treturn {\n//\t\tnormalizePlaintext: function() {\n//\t\t\treturn normalizePlaintext(phrase);\n//\t\t},\n//\t\tsize: function (){\n//\t\t\treturn getSquareSize(normalizePlaintext(phrase));\n//\t\t},\n//\t\tplaintextSegments: function(){\n//\t\t\tvar normalized=normalizePlaintext(phrase);\n//\t\t\tsquareSize=this.size(normalized);\n//\t\t\treturn getSegments(normalized);\n//\t\t},\n//\t\tciphertext: function(){\n//\t\t\treturn getCipherText(this.plaintextSegments());\n//\t\t},\n//\t\tnormalizeCiphertext: function(){\n//\t\t\treturn getSegments(this.ciphertext()).join(' ');\n//\t\t}\n//\t};\n//};\n//\n//module.exports = Crypto;\n\n'use strict';\n\nmodule.exports = function Crypto(str){\n\tlet length = 0,\n\t\t\tencoded = '',\n\t\t\tnormalized = '',\n\t\t\tnormalizedSegments = [];\n\n\t// is underscore puncuation? I'm gonna say no\n\tnormalized = str.toLowerCase().replace(/\\W/g,'');\n\n\t// get next perfect square\n\tlength = Math.ceil(Math.sqrt(normalized.length));\n\n\tnormalizedSegments = normalized.match(new RegExp(`.\\{1,${length}\\}`,'g'));\n\tfor(let i = 0; i < length; i++){\n\t\tfor(let segment of normalizedSegments) encoded += (segment[i] || '');\n\t}\n\n\treturn {\n\t\tciphertext: () => encoded,\n\t\tnormalizePlaintext:() => normalized,\n\t\tplaintextSegments: function plaintextSegments(){ return normalizedSegments; },\n\t\tsize: function size(){ return length; }\n\t};\n\n};"]}